{"version":3,"file":"react-jsx-runtime.production.min.js","mappings":";;;;;;;;;aAEA,IAAIA,EAAQC,OAAA,CAAQ,OAAR,CAAZ,CAMMC,EAAqBC,MAAAC,IAAA,CAAW,eAAX,CAN3B,CAOMC,EAAsBF,MAAAC,IAAA,CAAW,gBAAX,CAP5B,CAaME,EAAiBC,MAAAC,UAAAF,eAbvB,CAiBMG,EARuBT,CAAAU,mDAQHD,kBAjB1B,CAkBME,EAAiB,CACrBC,IAAK,EADgB,CAErBC,IAAK,EAFgB,CAGrBC,OAAQ,EAHa,CAIrBC,SAAU,EAJW,CA6DvBC;QAASA,EAAG,CAACC,CAAD,CAAOC,CAAP,CAAeC,CAAf,CAAyB,CACnC,IAAIC,CAAJ,CAEMC,EAAQ,EAFd,CAGIT,EAAM,IAHV,CAIIC,EAAM,IAOOS,OAAjB,GAAIH,CAAJ,GAEEP,CAFF,CAEQ,EAFR,CAEaO,CAFb,CA3DsBG,OAgEtB,GAAgBJ,CAhETN,IAgEP,GAEEA,CAFF,CAEQ,EAFR,CAEaM,CAAAN,IAFb,CArEsBU,OA0EtB,GAAgBJ,CA1ETL,IA0EP,GACEA,CADF,CACQK,CAAAL,IADR,CAKA,KAAKO,CAAL,GAAiBF,EAAjB,CACMZ,CAAAiB,KAAA,CAAoBL,CAApB,CAA4BE,CAA5B,CAAJ,EAA6C,CAACT,CAAAL,eAAA,CAA8Bc,CAA9B,CAA9C,GACEC,CAAA,CAAMD,CAAN,CADF,CACoBF,CAAA,CAAOE,CAAP,CADpB,CAMF,IAAIH,CAAJ,EAAYA,CAAAO,aAAZ,CAGE,IAAKJ,CAAL,GAFMI,EAEWA,CAFIP,CAAAO,aAEJA,EAAjB,CAC0BF,MAAxB,GAAID,CAAA,CAAMD,CAAN,CAAJ,GACEC,CAAA,CAAMD,CAAN,CADF,CACoBI,CAAA,CAAaJ,CAAb,CADpB,CAMJ,OAlEgBK,CAEdC,SAAUxB,CAFIuB,CAIdR,KA8DkBA,CAlEJQ,CAKdb,IA6DwBA,CAlEVa,CAMdZ,IA4D6BA,CAlEfY,CAOdJ,MA2DmFA,CAlErEI,CASdE,OAyDwDlB,CAAAmB,QAlE1CH,CAsBmB,CA6DrCI,OAAAC,SAAA,CAAmBzB,CACnBwB,QAAAb,IAAA,CAAce,CACdF,QAAAG,KAAA,CAAeA","names":["React","require","REACT_ELEMENT_TYPE","Symbol","for","REACT_FRAGMENT_TYPE","hasOwnProperty","Object","prototype","ReactCurrentOwner","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","RESERVED_PROPS","key","ref","__self","__source","jsx","type","config","maybeKey","propName","props","undefined","call","defaultProps","element","$$typeof","_owner","current","exports","Fragment","jsx$1","jsxs"],"sources":["react-jsx-runtime.production.js"],"sourcesContent":["'use strict';\n\nvar React = require('react');\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nconst REACT_ELEMENT_TYPE = Symbol.for('react.element');\nconst REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\n\nconst ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nconst ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nconst RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\n\nfunction hasValidRef(config) {\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n\n  return config.key !== undefined;\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nconst ReactElement = function (type, key, ref, self, source, owner, props) {\n  const element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\n\nfunction jsx(type, config, maybeKey) {\n  let propName; // Reserved names are extracted\n\n  const props = {};\n  let key = null;\n  let ref = null; // Currently, key can be spread in as a prop. This causes a potential\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n  // but as an intermediary step, we will use jsxDEV for everything except\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n  // key is explicitly declared to be undefined or not.\n\n  if (maybeKey !== undefined) {\n\n    key = '' + maybeKey;\n  }\n\n  if (hasValidKey(config)) {\n\n    key = '' + config.key;\n  }\n\n  if (hasValidRef(config)) {\n    ref = config.ref;\n  } // Remaining properties are added to a new props object\n\n\n  for (propName in config) {\n    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n      props[propName] = config[propName];\n    }\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, undefined, undefined, ReactCurrentOwner.current, props);\n}\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\nconst ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nconst ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nconst jsx$1 =  jsx; // we may want to special case jsxs internally to take advantage of static children.\n// for now we can ship identical prod functions\n\nconst jsxs =  jsx;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsx = jsx$1;\nexports.jsxs = jsxs;"]}